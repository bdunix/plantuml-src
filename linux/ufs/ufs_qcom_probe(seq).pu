@startuml

!include ../../include/sequence.iuml

title ufs_qcom_probe

box "ufs"
participant "ufs-qcom.c" as ufs_qcom order 1
participant "ufshcd-pltfrm.c" as ufshcd_pltfrm order 2
participant "ufshcd.c" as ufshcd order 3
end box

box "scsi"
participant "scsi_scan.c" as scsi_scan order 10
participant "scsi_lib.c" as scsi_lib order 20
participant "scsi_sysfs.c" as scsi_sysfs order 30
participant "sd.c" as sd order 40
end box

call([, ufs_qcom, ufs_qcom_probe)
call(ufs_qcom, ufshcd_pltfrm, ufshcd_pltfrm_init)
call(ufshcd_pltfrm, ufshcd, ufshcd_alloc_host)
return(ufshcd_pltfrm, ufshcd, ufshcd_alloc_host)
call(ufshcd_pltfrm, ufshcd, ufshcd_init)
call_self_async(ufshcd, ufshcd_async_scan)
call_self(ufshcd, ufshcd_probe_hba)
call_self(ufshcd, ufshcd_link_startup)
note right: Initialize unipro link startup.
call_self(ufshcd, ufshcd_vops_link_startup_notify)
call(ufshcd, ufs_qcom, ufs_qcom_link_startup_notify)
return(ufshcd, ufs_qcom, ufs_qcom_link_startup_notify)
return_self(ufshcd, ufshcd_vops_link_startup_notify)
call_self(ufshcd, ufshcd_dme_link_startup)
note right: Notify Unipro to perform link startup.
call_self(ufshcd, ufshcd_send_uic_cmd)
return_self(ufshcd, ufshcd_send_uic_cmd)
return_self(ufshcd, ufshcd_dme_link_startup)
return_self(ufshcd, ufshcd_link_startup)
call_self(ufshcd, ufshcd_verify_dev_init)
note right
Send NOP OUT UPIU and wait for NOP IN response to
check whether UTP layer is ready after a reset.
end note
return_self(ufshcd, ufshcd_verify_dev_init)
call_self(ufshcd, ufshcd_complete_dev_init)
note right
Host sets and polls fDeviceInit flag to
check UFS device initialization is complete.
end note
return_self(ufshcd, ufshcd_complete_dev_init)
call_self(ufshcd, ufs_read_device_desc_data)
return_self(ufshcd, ufs_read_device_desc_data)
call_self(ufshcd, ufshcd_scsi_add_wlus)
call(ufshcd, scsi_scan, __scsi_add_device)
note right
Add device for UFS W-LUN as their
nexus(host,channel,id,lun) is known.
end note
call_self(scsi_scan, scsi_alloc_target)
return_self(scsi_scan, scsi_alloc_target)
call_self(scsi_scan, scsi_probe_and_add_lun)
call_self(scsi_scan, scsi_alloc_sdev)
call(scsi_scan, scsi_lib, scsi_alloc_queue)
call_self(scsi_lib, __scsi_alloc_queue(..., **scsi_request_fn**))
return_self(scsi_lib, __scsi_alloc_queue(..., **scsi_request_fn**))
return(scsi_scan, scsi_lib, scsi_alloc_queue)
return_self(scsi_scan, scsi_alloc_sdev)
call_self(scsi_scan, scsi_probe_lun)
return_self(scsi_scan, scsi_probe_lun)
call_self(scsi_scan, scsi_add_lun)
call(scsi_scan, scsi_sysfs, scsi_sysfs_add_sdev)
call(scsi_sysfs, sd, device_add->bus_probe_device->sd_probe)
return(scsi_sysfs, sd, device_add->bus_probe_device->sd_probe)
return(scsi_scan, scsi_sysfs, scsi_sysfs_add_sdev)
return_self(scsi_scan, scsi_add_lun)
return_self(scsi_scan, scsi_probe_and_add_lun)
return(ufshcd, scsi_scan, __scsi_add_device)
return_self(ufshcd, ufshcd_scsi_add_wlus)
call(ufshcd, scsi_scan, scsi_scan_host)
note right: Scan the given adapter.
call_self_async(scsi_scan, do_scan_async)
call_self(scsi_scan, do_scsi_scan_host)
return_self(scsi_scan, do_scsi_scan_host)
call_self(scsi_scan, scsi_scan_host_selected)
note right: Scan wild card.
call_self(scsi_scan, scsi_scan_channel)
return_self(scsi_scan, scsi_scan_channel)
call_self(scsi_scan, __scsi_scan_target)
call_self(scsi_scan, scsi_alloc_target)
return_self(scsi_scan, scsi_alloc_target)
call_self(scsi_scan, scsi_probe_and_add_lun)
note right: Scan LUN 0 of SCSI target.
return_self(scsi_scan, scsi_probe_and_add_lun)
call_self(scsi_scan, scsi_sequential_lun_scan)
note right: Sequentially scan a SCSI target from LUN 1.
call_self(scsi_scan, scsi_probe_and_add_lun)
return_self(scsi_scan, scsi_probe_and_add_lun)
return_self(scsi_scan, scsi_sequential_lun_scan)
return_self(scsi_scan, __scsi_scan_target)
return_self(scsi_scan, scsi_scan_host_selected)
call_self(scsi_scan, scsi_finish_async_scan)
return_self(scsi_scan, scsi_finish_async_scan)
return_self_async(scsi_scan, do_scan_async)
return(ufshcd, scsi_scan, scsi_scan_host)
return_self(ufshcd, ufshcd_probe_hba)
call_self(ufshcd, ufshcd_extcon_register)
note right: For external UFS card.
return_self(ufshcd, ufshcd_extcon_register)
return_self_async(ufshcd, ufshcd_async_scan)
return(ufshcd_pltfrm, ufshcd, ufshcd_init)
return(ufs_qcom, ufshcd_pltfrm, ufshcd_pltfrm_init)
return([, ufs_qcom, ufs_qcom_probe)

@enduml
